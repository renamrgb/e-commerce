version: '3.8'

services:
  # API Gateway
  gateway:
    build:
      context: ./backend/gateway-service
    ports:
      - "8080:8080"
    depends_on:
      - catalog
      - order
      - cart
      - user
      - payment
      - inventory
      - notification
    networks:
      - ecommerce-network

  # Catalog Service (Kotlin)
  catalog:
    build:
      context: ./backend/catalog-service
    ports:
      - "8081:8081"
    depends_on:
      - postgres
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/catalog
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - ecommerce-network

  # Order Service (Java)
  order:
    build:
      context: ./backend/order-service
    ports:
      - "8082:8082"
    depends_on:
      - postgres
      - mongodb
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/order
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MONGODB_URI=mongodb://mongodb:27017/order
    networks:
      - ecommerce-network

  # Cart Service (Go)
  cart:
    build:
      context: ./backend/cart-service
    ports:
      - "8083:8083"
    depends_on:
      - redis
      - kafka
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - ecommerce-network

  # User Service (Java)
  user:
    build:
      context: ./backend/user-service
    ports:
      - "8084:8084"
    depends_on:
      - postgres
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/user
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - ecommerce-network

  # Payment Service (Go)
  payment:
    build:
      context: ./backend/payment-service
    ports:
      - "8085:8085"
    depends_on:
      - postgres
      - kafka
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=payment
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - ecommerce-network

  # Inventory Service (Kotlin)
  inventory:
    build:
      context: ./backend/inventory-service
    ports:
      - "8086:8086"
    depends_on:
      - postgres
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/inventory
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - ecommerce-network

  # Notification Service (Go)
  notification:
    build:
      context: ./backend/notification-service
    ports:
      - "8087:8087"
    depends_on:
      - mongodb
      - kafka
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/notification
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - ecommerce-network

  # Frontend (Angular)
  frontend:
    build:
      context: ./frontend
    ports:
      - "4200:80"
    depends_on:
      - gateway
    networks:
      - ecommerce-network

  # NGINX (Load Balancer)
  nginx:
    build:
      context: ./infrastructure/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - gateway
    networks:
      - ecommerce-network

  # PostgreSQL
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=catalog,order,user,payment,inventory
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres-init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network

  # MongoDB
  mongodb:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - ecommerce-network

  # Redis
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - ecommerce-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    networks:
      - ecommerce-network

networks:
  ecommerce-network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  redis_data: 