# Configurações do Servidor
server:
  port: 8085
  servlet:
    context-path: /
  error:
    include-stacktrace: never

# Configurações do Spring
spring:
  application:
    name: payment-service
  
  # Configurações do banco de dados
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/payment_db}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
  
  # Configurações JPA
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  
  # Configurações do Flyway
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
  
  # Configurações de Segurança
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://auth-service:8084/
          jwk-set-uri: http://auth-service:8084/api/auth/jwks

# Configurações de Kafka
kafka:
  bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
  consumer:
    group-id: payment-service-group
    auto-offset-reset: earliest
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  producer:
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: org.apache.kafka.common.serialization.StringSerializer
    acks: all

# Configurações do Outbox
outbox:
  scheduler:
    process-events-interval: ${OUTBOX_PROCESS_INTERVAL:5000}  # 5 segundos
    retry-events-interval: ${OUTBOX_RETRY_INTERVAL:60000}     # 1 minuto
    stats-interval: ${OUTBOX_STATS_INTERVAL:300000}           # 5 minutos
  processing:
    max-retries: 5
    retry-delay-minutes: 5
    batch-size: 50

# Configurações de Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
  tracing:
    sampling:
      probability: 1.0

# Configurações do Logging
logging:
  level:
    root: INFO
    com.ecommerce.payment: INFO
    org.springframework.kafka: INFO
    org.springframework.web: INFO
    org.hibernate: INFO
    io.github.resilience4j: INFO

# Configurações da API
api:
  version: 1.0.0

# Configurações do Stripe
stripe:
  api:
    key: ${STRIPE_API_KEY:sk_test_51TestKey}
  webhook:
    secret: ${STRIPE_WEBHOOK_SECRET:whsec_test_secret}

# Configurações de integração com outros serviços
services:
  order:
    host: order-service
    port: 8082
  user:
    host: user-service
    port: 8084

# Configurações do Springdoc OpenAPI
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method

# Configurações de Resilience4j
resilience4j:
  circuitbreaker:
    instances:
      stripeService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
      kafkaProducer:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
  retry:
    instances:
      stripeService:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
      kafkaProducer:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
  ratelimiter:
    instances:
      stripeApi:
        limitForPeriod: 10
        limitRefreshPeriod: 1s
        timeoutDuration: 3s

# Configurações de Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when_authorized
  info:
    app:
      name: ${spring.application.name}
      version: ${api.version} 